Calendar binding tasks:
=======================

 * Create a Hibernate mapping for a java.util.List Events that we can bind **DONE**
 * Add code to implement insert and deletion using the above listeners **DONE**
 * Change the new event dialog so that it inserts the event by adding it to
   Hibernate's mapped collection, then calling flush() on the session. **DONE**
   
 * Create a LazyInsertDeleteProvider that displays the new event dialog and 
   initializes its values to the current date/time.
 * In the action that opens a dialog to create a new event, detect if an 
   IEventEditor is open, and if it is,
   call fireInsert to display the new event dialog and perform the insert 
   operation.
 * When the user clicks OK in the new event dialog, detect if the calender is
   open and if it is not open, open it.
 * Hook up UI gestures (double-click, insert keypress, delete keypress) to 
   insert/delete events


CalendarableItem(Control)? tasks:
 * Needs an event model (change listeners, etc)  **DONE**
 * Needs to update the control when the item is updated if the control is visible  **DONE**
 * Needs an in-place editor (DEFERRED)
 
DayEditor tasks:
 * Needs an event that is fired when a CalendarableItem is no longer visible 
   (so bindings can be disposed)  **DONE**
 * Needs an addInsertHandler/removeInsertHandler, ...  **DONE**
 * Needs an addDeleteHandler/removeDeleteHandler, ...  **DONE**
 * Needs an addEditHandler/removeEditHandler, ...      **DONE**
   
DayEditor data binding tasks: **DONE**

In-place editing tasks: (DEFERRED)
 * Show in-place editor when user clicks a CalendarableItemControl (or maybe use
   an SWT Text to begin with)
 * Hook events on the editor and change the CalendarableItem's text property
   as the CalendarableItemControl's text property changes
   
